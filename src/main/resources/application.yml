server:
  port: ${SERVER_PORT:localhost}
rabbitmq:
  callback:
    url: http://${SERVER_HOST:localhost}:${SERVER_PORT}/rabbitmq/callback
  enabled: true
  message:
    broker:
      host: ${SERVER_HOST:localhost}
  queue:
    name: joe_queue
    name_dlx: joe_queue_dlx
activemq:
  callback:
    url: http://${SERVER_HOST:localhost}:${SERVER_PORT}/activemq/callback
  enabled: true
  message:
    broker:
      url: tcp://${SERVER_HOST:localhost}:61616
  queue:
    name: joe_queue
kafka:
  callback:
    url: http://${SERVER_HOST:localhost}:${SERVER_PORT}/kafka/callback
  enabled: ${KAFKA_ENABLED:true}
  queue:
    name: joe_topic
feign:
  client:
    url: http://${SERVER_HOST:localhost}:${SERVER_PORT}
response:
  wait: Callback was sent...
spring:
  jackson:
    serialization:
      fail-on-empty-beans: false
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
  data:
    r2dbc:
      repositories:
        enabled: true
  r2dbc:
    password: postgres
    url: r2dbc:postgresql://${SERVER_HOST:localhost}:5432/example
    username: postgres
  jpa:
    hibernate:
      ddl-auto: none
  kafka:
    bootstrap-servers: ${SERVER_HOST:localhost}:9092
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  sql:
    init:
      mode: always